// <auto-generated />
using System;
using GestionRecetas.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionRecetas.Migrations
{
    [DbContext(typeof(RecetasDBContext))]
    partial class RecetasDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionRecetas.Models.Ingrediente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreIngrediente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RecetaId")
                        .HasColumnType("int");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RecetaId");

                    b.ToTable("Ingredientes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cantidad = "1",
                            NombreIngrediente = "Lechuga romana",
                            RecetaId = 1,
                            Unidad = "Unidad"
                        },
                        new
                        {
                            ID = 2,
                            Cantidad = "200",
                            NombreIngrediente = "Pollo a la parrilla",
                            RecetaId = 1,
                            Unidad = "Gramos"
                        },
                        new
                        {
                            ID = 3,
                            Cantidad = "50",
                            NombreIngrediente = "Aderezo César",
                            RecetaId = 1,
                            Unidad = "Mililitros"
                        },
                        new
                        {
                            ID = 4,
                            Cantidad = "250",
                            NombreIngrediente = "Pasta espagheti",
                            RecetaId = 2,
                            Unidad = "Gramos"
                        },
                        new
                        {
                            ID = 5,
                            Cantidad = "100",
                            NombreIngrediente = "Crema de leche",
                            RecetaId = 2,
                            Unidad = "Mililitros"
                        },
                        new
                        {
                            ID = 6,
                            Cantidad = "1",
                            NombreIngrediente = "Huevo",
                            RecetaId = 2,
                            Unidad = "Unidad"
                        },
                        new
                        {
                            ID = 7,
                            Cantidad = "50",
                            NombreIngrediente = "Queso parmesano",
                            RecetaId = 2,
                            Unidad = "Gramos"
                        },
                        new
                        {
                            ID = 8,
                            Cantidad = "500",
                            NombreIngrediente = "Tomates frescos",
                            RecetaId = 3,
                            Unidad = "Gramos"
                        },
                        new
                        {
                            ID = 9,
                            Cantidad = "5",
                            NombreIngrediente = "Albahaca",
                            RecetaId = 3,
                            Unidad = "Hojas"
                        });
                });

            modelBuilder.Entity("GestionRecetas.Models.PasosPreparacion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int?>("RecetaId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecetaId");

                    b.ToTable("PasosPreparaciones");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Descripcion = "Lavar la lechuga romana y cortarla en trozos",
                            Orden = 1,
                            RecetaId = 1
                        },
                        new
                        {
                            ID = 2,
                            Descripcion = "Asar el pollo a la parrilla y cortarlo en tiras",
                            Orden = 2,
                            RecetaId = 1
                        },
                        new
                        {
                            ID = 3,
                            Descripcion = "Mezclar la lechuga, el pollo y el aderezo césar",
                            Orden = 3,
                            RecetaId = 1
                        },
                        new
                        {
                            ID = 4,
                            Descripcion = "Cocinar la pasta en agua hirvindo con sal",
                            Orden = 1,
                            RecetaId = 2
                        },
                        new
                        {
                            ID = 5,
                            Descripcion = "Mezclar el huevo, la crema y el queso parmesano",
                            Orden = 2,
                            RecetaId = 2
                        },
                        new
                        {
                            ID = 6,
                            Descripcion = "Añadir la mezcla a la pasta caliente",
                            Orden = 3,
                            RecetaId = 2
                        },
                        new
                        {
                            ID = 7,
                            Descripcion = "Cortar los tomates y hervirlos hasta que se ablanden",
                            Orden = 1,
                            RecetaId = 3
                        },
                        new
                        {
                            ID = 8,
                            Descripcion = "Licuar los tomates y agregar la albahaca",
                            Orden = 2,
                            RecetaId = 3
                        },
                        new
                        {
                            ID = 9,
                            Descripcion = "Cocinar por 10 minutos más y servir caliente",
                            Orden = 3,
                            RecetaId = 3
                        });
                });

            modelBuilder.Entity("GestionRecetas.Models.Receta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DescripcionReceta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreReceta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TiempoReceta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Recetas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DescripcionReceta = "Ensalada clásica con pollo, lechuga y aderezo César",
                            NombreReceta = "Ensalada César",
                            TiempoReceta = "20 minutos"
                        },
                        new
                        {
                            ID = 2,
                            DescripcionReceta = "Pasta con salsa de crema, huevo y queso parmesano",
                            NombreReceta = "Pasta Carbonara",
                            TiempoReceta = "30 minutos"
                        },
                        new
                        {
                            ID = 3,
                            DescripcionReceta = "Sopa ligera de tomate con albahaca",
                            NombreReceta = "Sopa de Tomate",
                            TiempoReceta = "40 minutos"
                        });
                });

            modelBuilder.Entity("GestionRecetas.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "577a2638-fa1d-42ff-9a53-7fc7ed6c3c4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40dde3b0-8469-4df3-a59c-f76476cc626a",
                            Email = "admin@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9PSex3C6Y7RYI5hgrPV5+Jy+3v5uu7QIuzTFYlejPHVUbhIWpfFVepesaoYqKRgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8551d850-9914-49af-94fa-2157a6ebaaea",
                            TwoFactorEnabled = false,
                            UserName = "admin@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4fbedbea-cac7-4f31-b9e2-129ff673dc31",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "ee2ada97-8768-4a8a-92ca-9ccac8764e3a",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "577a2638-fa1d-42ff-9a53-7fc7ed6c3c4e",
                            RoleId = "4fbedbea-cac7-4f31-b9e2-129ff673dc31"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GestionRecetas.Models.Ingrediente", b =>
                {
                    b.HasOne("GestionRecetas.Models.Receta", "Receta")
                        .WithMany()
                        .HasForeignKey("RecetaId");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("GestionRecetas.Models.PasosPreparacion", b =>
                {
                    b.HasOne("GestionRecetas.Models.Receta", "Receta")
                        .WithMany()
                        .HasForeignKey("RecetaId");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GestionRecetas.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GestionRecetas.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionRecetas.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GestionRecetas.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
